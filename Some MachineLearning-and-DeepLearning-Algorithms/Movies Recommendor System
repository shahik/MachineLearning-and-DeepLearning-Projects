
                    # Importing the libraries
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.nn.parallel
import torch.optim as optim
import torch.utils.data
from torch.autograd import Variable

# Importing the dataset

movies = pd.read_csv('ml-1m/movies.dat', sep = '::', header = None, engine = 'python', encoding = 'latin-1')
users = pd.read_csv('ml-1m/users.dat', sep = '::', header = None, engine = 'python', encoding = 'latin-1')
ratings = pd.read_csv('ml-1m/ratings.dat', sep = '::', header = None, engine = 'python', encoding = 'latin-1')

# Preparing the training set and the test set
training_set = pd.read_csv('ml-100k/u1.base', delimiter = '\t')
training_set = np.array(training_set, dtype = 'int') 
test_set = pd.read_csv('ml-100k/u1.test', delimiter = '\t')
test_set = np.array(test_set, dtype = 'int')

Note:  I did not post FUll COde !



# Creating the architecture of the Neural Network (Stacked Autoencoder several layers)
class SAE(nn.Module): 
    #encoding and decoding 
    def __init__(self, ):
        super(SAE, self).__init__()
        self.fc1 = nn.Linear(nb_movies, 20) 
        self.fc2 = nn.Linear(20, 10)
        self.fc3 = nn.Linear(10, 20) 
        self.fc4 = nn.Linear(20, nb_movies) 
        self.activation = nn.Sigmoid()   
    def forward(self, x): 
        x = self.activation(self.fc1(x)) 
        x = self.activation(self.fc2(x))
        x = self.activation(self.fc3(x)) 
        x = self.fc4(x) #decoding vector x 
        return x
sae = SAE()  
criterion = nn.MSELoss() 
 

# Training the SAE (Use Pytorch optimizer technique for millions of dataset)
nb_epoch = 200
for epoch in range(1, nb_epoch + 1): # +1 as upper bound excluded 
    train_loss = 0 # modified at each epic 
    s = 0. # . to make s float as root mean squre is float here 
    for id_user in range(nb_users): 
        input = Variable(training_set[id_user]).unsqueeze(0) # unsqueeze(0): new dimension on firstPlace(0). putting additional(fake) dimension using functions on training_set[id_user]. 
        target = input.clone()
        if torch.sum(target.data > 0) > 0: 
            output = sae(input) # input values are given in class to get output values , forward function will return output by taking input as x
            target.require_grad = False 
            output[target == 0] = 0  
            loss = criterion(output, target) 
            mean_corrector = nb_movies/float(torch.sum(target.data > 0) + 1e-10)
            loss.backward() # update weights(increase/decrease)
            train_loss += np.sqrt(loss.data[0]*mean_corrector) 
            s += 1. # no of user who rated movie 
            optimizer.step() 
    print('epoch: '+str(epoch)+' loss: '+str(train_loss/s))


